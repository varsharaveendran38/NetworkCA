name: Build and Deploy Web Application

on:
  push:
    branches:
      - main  # Trigger on push to main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/myapp:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure the build job is completed before deployment

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/my-key.pem
          chmod 600 ~/.ssh/my-key.pem

      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/my-key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} "echo 'SSH connection successful!'"

      - name: Set permissions for the deployment directory
        run: |
          ssh -i ~/.ssh/my-key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            sudo chown -R ubuntu:ubuntu /home/ubuntu/app/
            sudo chmod -R 755 /home/ubuntu/app/
          EOF

      - name: Sync files to EC2 instance using rsync
        run: |
          rsync -avz --exclude='.git' -e "ssh -i ~/.ssh/my-key.pem -o StrictHostKeyChecking=no" ./ ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/app/

      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/my-key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            # Navigate to the updated directory inside EC2
            cd /home/ubuntu/app
            # Stop and remove the existing Docker container
            docker stop myapp || true
            docker rm myapp || true
            # Remove old Docker image
            docker rmi ${{ secrets.DOCKER_USERNAME }}/myapp:latest || true
            # Pull the latest Docker image from Docker Hub
            docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:latest
            # Run the updated Docker container
            docker run -d -p 8080:80 --name myapp ${{ secrets.DOCKER_USERNAME }}/myapp:latest
          EOF
