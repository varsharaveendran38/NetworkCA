name: Build and Deploy Web Application

on:
  push:
    branches:
      - main  # Trigger on push to main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }} ***/app:myapp .

        docker push ${{ secrets.DOCKER_USERNAME }} ***/app:myapp .

        
  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure the build job is completed before deployment

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Check working directory
      run: pwd

    - name: Set up SSH connection and deploy to EC2
      run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" | tr -d '\r' > mykey.pem
          chmod 600 mykey.pem

          # Sync the updated files from GitHub to EC2 instance
          scp -i mykey.pem -o StrictHostKeyChecking=no -r ./Docker ec2-user@${{ secrets.EC2_HOST }}:/home/ubuntu/app/

          ssh -i mykey.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            # Navigate to the updated directory inside EC2
            cd /home/ubuntu/app/Docker

            # Stop and remove the existing Docker container
            docker stop myapp_container || true
            docker rm myapp_container || true

            # Remove old Docker image
            docker rmi myapp_container:latest || true

            # Build a fresh Docker image from updated files inside EC2
            docker build --no-cache -t myapp_container:latest .

            # Run the updated Docker container
            docker run -d -p 80:80 --name myapp myapp_container:latest
          EOF
